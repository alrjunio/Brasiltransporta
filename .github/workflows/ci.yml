﻿name: CI

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 8  # ✅ Reduzido

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with: 
          python-version: '3.12'
          
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: |
          pip install -U pip
          if [ -f poetry.lock ]; then
            pip install poetry
            poetry config virtualenvs.create false
            poetry install --no-interaction --no-ansi
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
            [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt || true
          fi

      - name: Ruff linting
        run: ruff check . --output-format=concise

      - name: Type checking
        run: mypy . --ignore-missing-imports

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 12  # ✅ Reduzido

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: brasiltransporta_test
        ports:
          - "5432:5432"
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=10
          --health-start-period=10s

      redis:
        image: redis:7-alpine
        ports:
          - "6379:6379"
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with: 
          python-version: '3.12'
          
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/poetry
          key: ${{ runner.os }}-deps-${{ hashFiles('**/poetry.lock', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: |
          pip install -U pip
          if [ -f poetry.lock ]; then
            pip install poetry
            poetry config virtualenvs.create false
            poetry install --no-interaction --no-ansi
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
            [ -f requirements-dev.txt ] && pip install -r requirements-dev.txt || true
          fi
          pip install pytest-xdist

      - name: Wait for services
        run: |
          echo "Waiting for PostgreSQL..."
          timeout 30s bash -c 'until pg_isready -h localhost -U postgres; do sleep 1; done'
          echo "Waiting for Redis..."
          timeout 15s bash -c 'until redis-cli -h localhost ping | grep -q PONG; do sleep 1; done'

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/brasiltransporta_test
        run: |
          if [ -f alembic.ini ]; then
            alembic upgrade head
          else
            echo "No Alembic config found, skipping migrations."
          fi

      - name: Run tests
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/brasiltransporta_test
          REDIS_URL: redis://localhost:6379/0
          RABBITMQ_URL: amqp://guest:guest@localhost:5672//
        run: |
          pytest -n auto -q --disable-warnings --maxfail=3 --durations=10 --timeout=30